/**
 * Middleware de v√©rification User-Agent
 * 
 * Ce middleware analyse l'en-t√™te User-Agent des requ√™tes entrantes
 * pour d√©tecter si elles proviennent d'un client CitizenFX.
 * 
 * Comportement:
 * - Ajoute une propri√©t√© 'isCitizenFX' √† l'objet request
 * - Cette propri√©t√© est utilis√©e par les routes pour d√©terminer la r√©ponse appropri√©e
 */

/**
 * Middleware pour d√©tecter les clients CitizenFX
 * @param {Object} req - Objet de requ√™te Express
 * @param {Object} res - Objet de r√©ponse Express  
 * @param {Function} next - Fonction next pour passer au middleware suivant
 */
function checkUserAgent(req, res, next) {
    // R√©cup√©ration de l'en-t√™te User-Agent
    const userAgent = req.get('User-Agent') || '';
    
    // V√©rification si l'User-Agent contient "CitizenFX"
    // La recherche est insensible √† la casse pour plus de flexibilit√©
    const isCitizenFX = userAgent.toLowerCase().includes('citizenfx');
    
    // Ajout de la propri√©t√© √† l'objet request pour utilisation dans les routes
    req.isCitizenFX = isCitizenFX;
    
    // Log pour le d√©bogage (peut √™tre d√©sactiv√© en production)
    if (process.env.NODE_ENV !== 'production') {
        console.log(`üîç User-Agent Check: ${isCitizenFX ? 'CitizenFX d√©tect√©' : 'Client standard'}`);
        console.log(`üì± User-Agent: ${userAgent}`);
    }
    
    // Passage au middleware/route suivant
    next();
}

module.exports = checkUserAgent;